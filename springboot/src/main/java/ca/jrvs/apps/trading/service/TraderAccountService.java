package ca.jrvs.apps.trading.service;

import ca.jrvs.apps.trading.dao.AccountDao;
import ca.jrvs.apps.trading.dao.PositionDao;
import ca.jrvs.apps.trading.dao.SecurityOrderDao;
import ca.jrvs.apps.trading.dao.TraderDao;
import ca.jrvs.apps.trading.model.domain.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.lang.reflect.Field;
import java.util.List;

@Service
public class TraderAccountService {

    private final TraderDao traderDao;
    private final AccountDao accountDao;
    private final PositionDao positionDao;
    private final SecurityOrderDao securityOrderDao;

    @Autowired
    public TraderAccountService(TraderDao traderDao, AccountDao accountDao, PositionDao positionDao,
                                SecurityOrderDao securityOrderDao) {
        this.traderDao = traderDao;
        this.accountDao = accountDao;
        this.positionDao = positionDao;
        this.securityOrderDao = securityOrderDao;
    }

    /**
     * Create a new trader and initialize a new account with 0 amount.
     * - validate user input (all fields must be non empty)
     * - create a trader
     * - create an account
     * - create, setup, and return a new traderAccountView
     *
     * Assumption: to simplify the logic, each trader has only one account where traderId == accountId
     *
     * @param trader cannot be null. All fields cannot be null except for id (auto-generated by db)
     * @return traderAccountView
     * @throws IllegalArgumentException if a trader has null fields or id is not null.
     */
    public TraderAccountView createTraderAndAccount(Trader trader) {
        for (Field field : trader.getClass().getFields()) {
            if (field.getName() == "id" && field != null) {
                    throw new IllegalArgumentException("ERROR: ID must be null");
            }
            else {
                if (field == null) {
                    throw new IllegalArgumentException("ERROR: Fields cannot be null.");
                }
            }
        }

        traderDao.save(trader);

        Account account = new Account();
        account.setTraderId(trader.getId());
        account.setAmount(0.0);
        accountDao.save(account);

        return new TraderAccountView(trader, account);
    }

    /**
     * A trader can be deleted if it has no open position and 0 cash balance.
     * - validate traderID
     * - get trader account by traderId and check account balance
     * - get positions by accountId and check positions
     * - delete all securityOrders, account, trader (in this order)
     *
     * @param traderId must not be null
     * @throws IllegalArgumentException if traderId is null or not found or unable to delete
     */
    public void deleteTraderById(Integer traderId) {
        if (traderId == null) {
            throw new IllegalArgumentException("ERROR: Must have a valid Trader ID");
        }

        if (!traderDao.existsById(traderId)) {
            throw new IllegalArgumentException("ERROR: Must have an existing trader");
        }

        Account account = accountDao.findByTraderId(traderId);
        if (account.getAmount() > 0) {
            throw new IllegalArgumentException("ERROR: Account can only be deleted if the balance is 0");
        }

        if (positionDao.getPosition(traderId).size() > 0) {
            throw new IllegalArgumentException("ERROR: Cannot delete, there are open positions");
        }

        List<SecurityOrder> orderList = securityOrderDao.findAllByAccountId(account.getId());

        orderList.forEach(order -> securityOrderDao.deleteById(order.getId()));
        accountDao.deleteById(account.getId());
        traderDao.deleteById(traderId);

    }

    /**
     * Deposit a fund to an account by traderId
     * - Validate user input
     * - account = accountDao.findByTraderId
     * - accountDao.updateAmountById
     *
     * @param traderId must not be null
     * @param fund must be greater than 0
     * @return updated Account
     * @throws IllegalArgumentException if traderId is null or not found, and fund is less or equal to 0
     */
    public Account deposit(Integer traderId, Double fund) {
        if (traderId == null) {
            throw new IllegalArgumentException("ERROR: Trader ID cannot be null");
        }

        if (traderDao.existsById(traderId)) {
            if (fund <= 0) {
                throw new IllegalArgumentException("ERROR: Fund must be greater than 0.");
            }

            Account account = accountDao.findByTraderId(traderId);
            account = accountDao.updateAccountById(account, account.getAmount() + fund);
            return account;
        }

        else {
            throw new IllegalArgumentException("ERROR: Trader account does not exist");
        }
    }

    /**
     * Withdraw a fund to an account by traderId
     *
     * - Validate user input
     * - account = accountDao.findByTraderId
     * - accountDao.updateAmountById
     *
     * @param traderId traderId
     * @param fund amount can't be 0
     * @return updated Account
     * @throws IllegalArgumentException if traderId is null or not found, fund is less or equal to 0, and insufficient fund
     */
    public Account withdraw(Integer traderId, Double fund) {
        if (traderId == null) {
            throw new IllegalArgumentException("ERROR: Trader must be valid");
        }

        if (traderDao.existsById(traderId)) {
            if (fund <= 0) {
                throw new IllegalArgumentException("ERROR: Fund must be greater than 0");
            }

            Account account = accountDao.findByTraderId(traderId);

            if (account.getAmount() < fund) {
                throw new IllegalArgumentException("ERROR: You cannot withdraw an amount more than the funds you have");
            }

            account = accountDao.updateAccountById(account, account.getAmount() - fund);
            return account;
        }

        else {
            throw new IllegalArgumentException("ERROR: Trader account does not exist");
        }
    }

}
